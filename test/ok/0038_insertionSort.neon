data Nat =
| Zero
| Succ (pred : Nat)

data List (A : Type) =
| Nil
| Cons (hd : A) (tl : List(A))

data MyBool = 
| True
| False

fix leBool (n : Nat) {m : Nat} : MyBool =
  match n with
  | Zero      -> True
  | Succ(n)  ->
      match m with
      | Zero     -> False
      | Succ(m) -> leBool(n, m)

fix insert (x : Nat) {xs : List(Nat)} : List(Nat) =
  match xs with
  | Nil(A) ->
      Cons(A, x, Nil(A))
  | Cons(A, y, tl) ->
      match leBool(x, y) with
      | True  -> Cons(A, x, Cons(A, y, tl))
      | False -> Cons(A, y, insert(x)(tl))

fix sort {xs : List(Nat)} : List(Nat) =
  match xs with
  | Nil(A) ->
      Nil(A)
  | Cons(A, h, tl) ->
      insert(h)(sort(tl))