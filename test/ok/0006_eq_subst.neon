let eq (A : Type) (x : A) (y : A) = 
    forall P : (A -> Type) => P(x) -> P(y)

let subst_type = 
    forall (A: Type) (P: A -> Type) (x: A) (y: A) => eq(A,x,y) -> P(x) -> P(y)

lemma subst : subst_type = 
    fun A P x y xy => xy(P)