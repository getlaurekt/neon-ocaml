data Nat =
| Zero
| Succ (k : Nat)

data Vec (A : Type) (n : Nat) =
| VNil (p : n == Zero)
| VCons (m  : Nat)
        (p  : n == Succ(m))
        (hd : A)
        (tl : Vec(A , m))

let two =
  VCons( Int
       , Succ(Succ(Zero)) 
       , Succ(Zero) 
       , (refl (Succ(Succ(Zero)))) /* Test */
       , 1
       , VCons( Int       
              , Succ(Zero)  
              , Zero        
              , (refl (Succ(Zero)))
              , 2
              , VNil( Int
                    , Zero
                    , (refl Zero))))

let vecInt (n : Nat) = Vec(Int, n)