data Nat =
| Zero
| Succ (k : Nat)

data VecInt (n : Nat) =
| VNil
    (p : n == Zero      :> Nat)
| VCons
    (m  : Nat)                     
    (p  : n == Succ(m)  :> Nat)    
    (hd : Int)
    (tl : VecInt(m))

let vnil : VecInt(Zero) =
  VNil( Zero
      , (refl Zero :> Nat))

let cons (m : Nat) (hd : Int) (tl : VecInt(m)) =
  VCons( Succ(m)         
       , m                
       , (refl (Succ(m)) :> Nat)
       , hd
       , tl)

let two : VecInt(Succ(Succ(Zero))) = 
  cons(
    Succ(Zero),
    1,
    cons(
      Succ(Zero),
      1,
      cons(
        Zero,
        2,
        vnil
      )
    )
  )
